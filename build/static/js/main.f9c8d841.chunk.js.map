{"version":3,"sources":["config/index.js","WeatherCondition.js","Forecast.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","keys","openweathermap_API_KEY","WeatherCondition","props","status","responseObj","cod","react_default","a","createElement","name","Math","round","main","temp","unit","weather","description","wind","speed","humidity","Forecast","require","_useState","useState","_useState2","Object","slicedToArray","setResponseObj","_useState3","_useState4","city","setCity","_useState5","_useState6","setUnit","src_WeatherCondition","onSubmit","e","preventDefault","fetch","then","response","json","error","alert","message","type","placeholder","maxLength","value","onChange","target","checked","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","className","src_Forecast","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9c8d841.chunk.js","sourcesContent":["const keys = {\r\n  openweathermap_API_KEY: \"d6e0e85a41968aaf6240b5ed27522ebd\",\r\n};\r\n\r\nmodule.exports = { keys };\r\n","import React from 'react';\r\n\r\nconst WeatherCondition = (props) => {\r\n  let status = '';\r\n  if (typeof props.responseObj.cod !== 'undefined') {\r\n      status=\"Location not found!\"\r\n    }\r\n   return (\r\n\r\n       <div>\r\n           {props.responseObj.cod === 200 ?\r\n               <div>\r\n                   <h3>at {props.responseObj.name}:</h3>\r\n                   <p>It is currently {Math.round(props.responseObj.main.temp)} degrees {props.unit===\"metric\"?\" Celcius\":\"Fahrenheit\"} out with {props.responseObj.weather[0].description}.</p>\r\n                   <p>Wind speed is {props.responseObj.wind.speed} {props.unit === \"metric\" ? \"km/hr\":\"ml/hr\"} with humidity at {props.responseObj.main.humidity}%.</p>\r\n               </div>\r\n           :   <div>\r\n                  <h3> {status}</h3>\r\n               </div>\r\n           }\r\n       </div>\r\n   )\r\n}\r\nexport default WeatherCondition\r\n","import React, { useState } from \"react\";\r\nimport \"isomorphic-fetch\";\r\nimport WeatherCondition from \"./WeatherCondition\";\r\n// The keys object contains the API keys\r\nconst { keys } = require(\"./config\");\r\n\r\nconst Forecast = (props) => {\r\n  let [responseObj, setResponseObj] = useState({});\r\n\r\n  function getForecast(e) {\r\n    e.preventDefault();\r\n    // Next, make the call to the openweathermap API, with the parameters for the specified city\r\n//    fetch(\r\n//      `http://api.openweathermap.org/data/2.5/weather?units=${unit}&q=${city}&appid=${keys.openweathermap_API_KEY}`\r\n//    )\r\n    fetch(\r\n      \"http://api.openweathermap.org/data/2.5/weather?units=metric&q=durban&appid=d6e0e85a41968aaf6240b5ed27522ebd\"\r\n    )\r\n\r\n      .then((response) => response.json())\r\n      .then(\r\n        (response) => {\r\n          setResponseObj(response);\r\n        },\r\n        (error) => {\r\n          alert(\"Error in fetching weather data : \" + error.message);\r\n        }\r\n      );\r\n  }\r\n\r\n  let [city, setCity] = useState(\"\");\r\n  let [unit, setUnit] = useState(\"metric\");\r\n\r\n  return (\r\n    // The following JSX code block renders the form that captures the user input\r\n    <div>\r\n      <h2>Currentt Weather Conditions</h2>\r\n      <div>\r\n        <WeatherCondition responseObj={responseObj} unit={unit} />\r\n      </div>\r\n      <form onSubmit={getForecast}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter City\"\r\n          maxLength=\"50\"\r\n          value={city}\r\n          onChange={(e) => setCity(e.target.value)}\r\n        />\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"units\"\r\n            checked={unit === \"metric\"}\r\n            value=\"metric\"\r\n            onChange={(e) => setUnit(e.target.value)}\r\n          />\r\n          Celcius\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"units\"\r\n            checked={unit === \"imperial\"}\r\n            value=\"imperial\"\r\n            onChange={(e) => setUnit(e.target.value)}\r\n          />\r\n          Fahrenheit\r\n        </label>\r\n        <button type=\"submit\">Get Forecast</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Forecast;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Forecast from \"./Forecast\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: \"\",\n      unit: \"imperial\",\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <main>\n          <h1>Weather Forecast App</h1>\n          <Forecast />\n        </main>\n        <footer>Created by Tunde Bello</footer>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}